<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0, user-scalable=0">
    <title>Team <%= teamNumber %> - FRCStats</title>
    <link rel="stylesheet" href="/style.css">
    <link rel="icon" href="/logo.png">
    <link rel="manifest" href="/manifest.json">
    <meta name="msapplication-TileColor" content="#ffffff">
    <meta name="msapplication-TileImage" content="/logo.png">
    <style>
        a {
            text-decoration: none;
            color: white;
        }

        canvas {
            max-height: 500px;
        }

        details {
            margin: 1em 0;
        }

        summary {
            padding: 0.5em;
            cursor: pointer;
            font-weight: bold;
        }
    </style>
</head>
<body>
    <div class="header">
        <a class="home" href="/index.html">Home</a>
        <h1>Team <%= teamNumber %></h1>
        <h2><%= teamName %></h2>
        <% if (message) { %>
            <p class="error"><%= message %></p>
            <p>Season: 
                <select id="yearSelect" onchange="location = '/review/<%= teamNumber %>?year=' + this.value;">
                    <% yearsParticipated.sort((a, b) => b - a).forEach(y => { %>
                        <option value="<%= y %>" <%= y == year ? 'selected' : '' %>><%= y %></option>
                    <% }) %>
                </select>
            </p>
        <% } else { %>
            <p>Season: 
                <select id="yearSelect" onchange="location = '/review/<%= teamNumber %>?year=' + this.value;">
                    <% yearsParticipated.sort((a, b) => b - a).forEach(y => { %>
                        <option value="<%= y %>" <%= y == year ? 'selected' : '' %>><%= y %></option>
                    <% }) %>
                </select>
            </p>
            <p><%=wins%> Wins | <%=losses%> Losses | <%=ties%> Ties</p>
            <p>Win Percentage: <%= winPercentage %></p>
            <p>Median Alliance Points: <%= teamMedianPoints %></p>
            <p>Rank: <%= globalRank %></p>
        <% } %>
    </div>

    <% if (matchScores.length > 0) { %>
        <details open>
            <summary>Average Points Over Matches</summary>
            <div class="content">
                <canvas id="scoreChart"></canvas>
            </div>
        </details>
    <% } %>

    <details open>
        <summary>Future Matches</summary>
        <div class="content">
            <% if (predictions.length > 0) { %>
                <table>
                    <thead>
                        <tr>
                            <th>Match</th>
                            <th>Red Alliance Teams</th>
                            <th>Blue Alliance Teams</th>
                            <th>Predicted Winner</th>
                            <th>Estimated Time Until</th>
                        </tr>
                    </thead>
                    <tbody>
                        <% predictions.forEach((prediction, index) => { %>
                            <tr>
                                <td><%= prediction.matchKey %></td>
                                <td class="red-alliance"><%= prediction.redTeams.replace(/frc/g, '') %></td>
                                <td class="blue-alliance"><%= prediction.blueTeams.replace(/frc/g, '') %></td>
                                <td><%= prediction.predictedWinner %></td>
                                <td><%= queuingEstimates[index]?.timeUntil || 'N/A' %></td>
                            </tr>
                        <% }) %>
                    </tbody>
                </table>
            <% } else { %>
                <p>No future matches available at this time.</p>
            <% } %>
        </div>
    </details>

    <details open>
        <summary>Past Matches</summary>
        <div class="content">
            <% if (matches.length > 0) { %>
                <div style="margin-bottom: 1em;">
                    <label for="compSelect">Competition: </label>
                    <select id="compSelect" onchange="filterMatches(this.value)">
                        <option value="all" selected>All Competitions</option>
                        <% const uniqueEvents = [...new Set(matches.map(m => m.event))]; %>
                        <% uniqueEvents.forEach(event => { %>
                            <option value="<%= event %>"><%= event %></option>
                        <% }) %>
                    </select>
                </div>
                <table id="matchesTable">
                    <thead>
                        <tr>
                            <th>Event</th>
                            <th>Match</th>
                            <th>Red Score</th>
                            <th>Blue Score</th>
                            <th>Result</th>
                        </tr>
                    </thead>
                    <tbody id="matchesBody">
                        <% matches.forEach(match => { %>
                            <tr class="<%= match.alliance.toLowerCase() %>-row" data-event="<%= match.event %>">
                                <td><%= match.event %></td>
                                <td><%= match.matchKey %></td>
                                <td><%= match.redScore %></td>
                                <td><%= match.blueScore %></td>
                                <td class="<%= match.result.toLowerCase() %>"><%= match.result %></td>
                            </tr>
                        <% }) %>
                    </tbody>
                </table>
                <div style="margin-top: 1em;">
                    <% uniqueEvents.forEach(event => { %>
                        <% const eventMatches = matches.filter(m => m.event === event); %>
                        <% const eventWins = eventMatches.filter(m => m.result === 'Win').length; %>
                        <% const eventTotal = eventMatches.length; %>
                        <% const winRate = eventTotal > 0 ? ((eventWins / eventTotal) * 100).toFixed(2) : 0; %>
                        <p><%= event %> Win Rate: <%= winRate %>% (<%= eventWins %>/<%= eventTotal %>)</p>
                    <% }) %>
                    <% const totalWins = matches.filter(m => m.result === 'Win').length; %>
                    <% const overallWinRate = matches.length > 0 ? ((totalWins / matches.length) * 100).toFixed(2) : 0; %>
                    <p>Overall Win Rate: <%= overallWinRate %>% (<%= totalWins %>/<%= matches.length %>)</p>
                </div>
            <% } else { %>
                <p>No match results available.</p>
            <% } %>
        </div>
    </details>
    
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script>
        <% if (matchScores.length > 0) { %>
            const ctx = document.getElementById('scoreChart').getContext('2d');
            const matchScores = <%- JSON.stringify(matchScores) %>;
            const labels = matchScores.map(match => match.label);
            const scores = matchScores.map(match => match.score);
    
            new Chart(ctx, {
                type: 'line',
                data: {
                    labels: labels,
                    datasets: [{
                        label: 'Alliance Points',
                        data: scores,
                        borderColor: 'rgba(12, 64, 237, 1)',
                        backgroundColor: 'rgba(12, 64, 237, 0.2)',
                        fill: true,
                        tension: 0.1
                    }]
                },
                options: {
                    responsive: true,
                    scales: {
                        x: { title: { display: true, text: 'Matches' } },
                        y: { title: { display: true, text: 'Points' }, beginAtZero: true }
                    },
                    plugins: {
                        title: { display: true, text: `Team <%= teamNumber %> Points` }
                    }
                }
            });
        <% } %>

        function filterMatches(selectedEvent) {
        const rows = document.querySelectorAll('#matchesBody tr');
        rows.forEach(row => {
            const event = row.getAttribute('data-event');
            if (selectedEvent === 'all' || event === selectedEvent) {
                row.style.display = '';
            } else {
                row.style.display = 'none';
            }
        });
    }

    filterMatches('all');

    function setCookie(name, value, days) {
        let expires = "";
        if (days) {
            let date = new Date();
            date.setTime(date.getTime() + (days * 24 * 60 * 60 * 1000));
            expires = "; expires=" + date.toUTCString();
        }
        document.cookie = name + "=" + value + "; path=/" + expires;
    }

    function getCookie(name) {
        let nameEQ = name + "=";
        let ca = document.cookie.split(';');
        for (let i = 0; i < ca.length; i++) {
            let c = ca[i];
            while (c.charAt(0) === ' ') c = c.substring(1, c.length);
            if (c.indexOf(nameEQ) === 0) return c.substring(nameEQ.length, c.length);
        }
        return null;
    }

    document.addEventListener("DOMContentLoaded", function () {
        const detailsElements = document.querySelectorAll("details");

        detailsElements.forEach((details, index) => {
            const state = getCookie("details-" + index);
            if (state === "open") {
                details.setAttribute("open", "open");
            } else {
                details.removeAttribute("open");
            }

            details.addEventListener("toggle", function () {
                setCookie("details-" + index, details.open ? "open" : "closed", 7);
            });
        });
    });
    </script>

    <script src="/gradient.js"></script>
</body>
</html>